/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.19
 */
import type { LoginUserParams, User } from "../../models";
import { customFetch } from "../../../../custom-fetch";

/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export type createUserResponse = {
  data: User | User;
  status: number;
  headers: Headers;
};

export const getCreateUserUrl = () => {
  return `http://localhost:3000/user`;
};

export const createUser = async (
  user: User,
  options?: RequestInit,
): Promise<createUserResponse> => {
  return customFetch<createUserResponse>(getCreateUserUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(user),
  });
};

/**
 * Creates list of users with given input array
 * @summary Creates list of users with given input array
 */
export type createUsersWithListInputResponse = {
  data: User | void;
  status: number;
  headers: Headers;
};

export const getCreateUsersWithListInputUrl = () => {
  return `http://localhost:3000/user/createWithList`;
};

export const createUsersWithListInput = async (
  user: User[],
  options?: RequestInit,
): Promise<createUsersWithListInputResponse> => {
  return customFetch<createUsersWithListInputResponse>(
    getCreateUsersWithListInputUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(user),
    },
  );
};

/**
 * @summary Logs user into the system
 */
export type loginUserResponse = {
  data: string | void;
  status: number;
  headers: Headers;
};

export const getLoginUserUrl = (params?: LoginUserParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `http://localhost:3000/user/login?${normalizedParams.toString()}`
    : `http://localhost:3000/user/login`;
};

export const loginUser = async (
  params?: LoginUserParams,
  options?: RequestInit,
): Promise<loginUserResponse> => {
  return customFetch<loginUserResponse>(getLoginUserUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Logs out current logged in user session
 */
export type logoutUserResponse = {
  data: void | void;
  status: number;
  headers: Headers;
};

export const getLogoutUserUrl = () => {
  return `http://localhost:3000/user/logout`;
};

export const logoutUser = async (
  options?: RequestInit,
): Promise<logoutUserResponse> => {
  return customFetch<logoutUserResponse>(getLogoutUserUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Get user by user name
 */
export type getUserByNameResponse = {
  data: User | void;
  status: number;
  headers: Headers;
};

export const getGetUserByNameUrl = (username: string) => {
  return `http://localhost:3000/user/${username}`;
};

export const getUserByName = async (
  username: string,
  options?: RequestInit,
): Promise<getUserByNameResponse> => {
  return customFetch<getUserByNameResponse>(getGetUserByNameUrl(username), {
    ...options,
    method: "GET",
  });
};

/**
 * This can only be done by the logged in user.
 * @summary Update user
 */
export type updateUserResponse = {
  data: void | void;
  status: number;
  headers: Headers;
};

export const getUpdateUserUrl = (username: string) => {
  return `http://localhost:3000/user/${username}`;
};

export const updateUser = async (
  username: string,
  user: User,
  options?: RequestInit,
): Promise<updateUserResponse> => {
  return customFetch<updateUserResponse>(getUpdateUserUrl(username), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(user),
  });
};

/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export type deleteUserResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getDeleteUserUrl = (username: string) => {
  return `http://localhost:3000/user/${username}`;
};

export const deleteUser = async (
  username: string,
  options?: RequestInit,
): Promise<deleteUserResponse> => {
  return customFetch<deleteUserResponse>(getDeleteUserUrl(username), {
    ...options,
    method: "DELETE",
  });
};
